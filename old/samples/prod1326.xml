 <!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
   
    http://www.apache.org/licenses/LICENSE-2.0
   
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!-- 

    Lets deploy some Enterprise Integration Patterns inside the ActiveMQ Message Broker
    For more information, see:
    
    http://camel.apache.org
    
    Include this file in your configuration to enable Camel
    
    e.g. <import resource="camel.xml"/>
    
-->
<beans
   xmlns="http://www.springframework.org/schema/beans"  
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
   http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
<camelContext id="camel" trace="false" xmlns="http://camel.apache.org/schema/spring"
	xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
	xmlns:ns0="http://www.ercot.com/schema/2009-02/nodal/NotificationsSchema"
	xmlns:ns1="http://www.ercot.com/schema/2007-06/nodal/ews/message"
	xmlns:ns2="http://www.ercot.com/schema/2007-06/nodal/ews" streamCache="true">

		<!-- You can use a <packages> element for each root package to search for Java routes -->
		<!--<packageScan>
					 <package>org.foo.bar</package>
				</packageScan>-->


		<!-- Copy Awards files into separate VirtualTopic for writing to disk by a consumer somewhere -->
		<route>
			<from uri ="activemq:topic:VirtualTopic.ISOProxy.ErcotToTenaska"/>
			<choice>
				<when>
					<xpath>
						(//*:Noun='AwardedAS' or
						//*:Noun='AwardedPTPObligation' or
						//*:Noun='AwardedEnergyBid' or
						//*:Noun='AwardedEnergyOnlyOffer' or
						//*:Noun='AwardedEnergyOffer') and
						//*:ReplyCode='OK'
					</xpath>
					<transform>
						<xpath>//*:Payload</xpath>
					</transform>
					<to uri="activemq:topic:VirtualTopic.xpath.ISOProxy.ErcotToTenaska.Awards?jmsMessageType=Text"/>
				</when>
			</choice>
		</route>

		<!-- This route sends emails to settlements group for different settlements-related messages, as well as other types to  -->
		<route errorHandlerRef="ercotInboundErrorHandler">
			<from uri="activemq:topic:VirtualTopic.ISOProxy.ErcotToTenaska"/>

			<choice>
				<!--Handle messages to ALL QSEs, pick out only Main QSE messages so we don't send 30 each time -->
				<when>
					<xpath>//*:qse='ALLMPs' and //RawUrl[contains(.,'TENSKA')] and //*:type='Settlements'</xpath>

					<setHeader headerName="subject">
						<simple>Settlements notification from ERCOT Nodal!</simple>
					</setHeader>
					<transform>
						<xpath>//*:summary</xpath>
					</transform>
					<transform>
						<simple>This is the summary from the message: ${in.body}</simple>
					</transform>
					<to  uri="smtp://smtp.tps.local:25?to=mbohan@tnsk.com&amp;from=Activemq@tnsk.com"/>

				</when>
				<when>
					<xpath>//ns2:qse='ALLQSEs' or //ns2:qse='Public' or //ns2:qse='ALLMPs'</xpath>
					<filter>
						<xpath>//RawUrl[contains(.,'TENSKA')]</xpath>
						<choice>
							<when>
								<xpath>
									//ns2:ID='DAM-ASAWD-RPT' or
									//ns2:ID='DAM-TPAWD-RPT' or
									//ns2:ID='DAM-ENGYAWD-RPT' or
									//ns2:ID='DAM-CRRAWD-RPT' or
									//ns2:ID='DAM-PTPAWD-RPT' or
									//ns2:ID='DRUC-AWD-RPT' or
									//ns2:ID='SASM-OPEN-NOTF' or
									//ns2:ID='SASM-ASOBL-RPT' or
									//ns2:ID='SASM-ASAWD-RPT' or
									//ns2:ID='DAM-ASINSUFF-NOTF' or
									//ns2:ID='DAM-P2VAL-NOTF' or
									//ns2:ID='DAM-ASINSUFF-RPT' or
									//ns2:ID='DAM-ASMCPC-RPT' or
									//ns2:ID='SASM-CLOSE-NOTF' or
									//ns2:ID='CM-SWCAP-NOTF' or
									//ns2:ID='DAM-P2VAL-ERR'
								</xpath>
								<setHeader headerName="sendToAM">
									<simple>true</simple>
								</setHeader>
								<filter>
									<xpath>
										//ns2:ID='SASM-OPEN-NOTF' or
										//ns2:ID='SASM-ASOBL-RPT' or
										//ns2:ID='SASM-ASAWD-RPT' or
										//ns2:ID='DAM-ASINSUFF-NOTF' or
										//ns2:ID='DAM-ASINSUFF-RPT' or
										//ns2:ID='DAM-ASMCPC-RPT' or
										//ns2:ID='CM-SWCAP-NOTF'
									</xpath>
									<setHeader headerName="sendToMA">
										<simple>true</simple>
									</setHeader>
									<!--<to  uri="smtp://smtp.tps.local:25?to=MarketAnalysis@tnsk.com&amp;from=Activemq@tnsk.com"/>-->
									<!--<to  uri="smtp://smtp.tps.local:25?to=MarketAnalysis@tnsk.com,mbohan@tnsk.com&amp;from=Activemq@tnsk.com"/>-->
								</filter>
								<setHeader headerName="subject">
									<xpath resultType="java.lang.String">concat(concat(//ns2:ID,' for QSE: '), //ns2:qse)</xpath>
								</setHeader>
								<transform>
									<xpath resultType="java.lang.String">//ns2:summary</xpath>
								</transform>
								<transform>
									<simple>This is the summary from the ERCOT message: ${in.body}</simple>
								</transform>
								<filter>
									<simple>${in.header.sendToAM} == 'true'</simple>
									<to  uri="smtp://smtp.tps.local:25?to=mbohan@tnsk.com&amp;from=Activemq@tnsk.com"/>
								</filter>
								<filter>
									<simple>${in.header.sendToMA} == 'true'</simple>
									<to  uri="smtp://smtp.tps.local:25?to=mbohan@tnsk.com&amp;from=Activemq@tnsk.com"/>
								</filter>
							</when>
							<when>
								<xpath>
									//ns2:Type[matches(.,'Alert|OCN|Emergency\sNotification|Watch','i')]
								</xpath>
								<setHeader headerName="subject">
									<xpath resultType="java.lang.String">Important Message From ERCOT Nodal</xpath>
								</setHeader>
								<transform>
									<xpath resultType="java.lang.String">//ns2:summary</xpath>
								</transform>
								<transform>
									<simple>This is the summary from the ERCOT message: ${in.body}</simple>
								</transform>
								<to  uri="smtp://smtp.tps.local:25?to=mbohan@tnsk.com&amp;from=Activemq@tnsk.com"/>
							</when>
							<when>
								<xpath>
									//ns2:summary[contains(.,'adjusted responsive reserve being below 3000 MW')] or
									//ns2:summary[contains(.,'adjusted responsive reserve being below 2500 MW')] or
									//ns2:summary[contains(.,'EEA')] or
									//ns2:summary[contains(.,'Load Resources')] or
									//ns2:summary[contains(.,'Change in GTL found')] or
									//ns2:summary[contains(.,'Load Resources')] or
									//ns2:type='Emergency Notice' or
									//ns2:summary[contains(.,'ERCOT has extended')] or
									//ns2:summary[contains(.,'ERCOT has declared the DAM process invalid')] or
									//ns2:summary[contains(.,'CRR auction will be accepted')] or
									//ns2:summary[contains(.,'due to the failure of the SCED process')]
									//ns2:summary[contains(.,'has been removed due to reflected changes in the Transmission Grid')]
									//ns2:summary[contains(.,'LF UPDATED')]
								</xpath>
								<setHeader headerName="subject">
									<xpath resultType="java.lang.String">//ns2:summary</xpath>
								</setHeader>
								<transform>
									<xpath resultType="java.lang.String">//ns2:summary</xpath>
								</transform>
								<transform>
									<simple>This is the summary from the ERCOT message: ${in.body}</simple>
								</transform>
								<to  uri="smtp://smtp.tps.local:25?to=mbohan@tnsk.com&amp;from=Activemq@tnsk.com"/>
							</when>
						</choice>

					</filter>
				</when>
				<!-- Also send reports for reports directly addressed to individual QSEs -->

				<when>
					<xpath>
						//ns2:ID='DAM-ASAWD-RPT' or
						//ns2:ID='DAM-TPAWD-RPT' or
						//ns2:ID='DAM-ENGYAWD-RPT' or
						//ns2:ID='DAM-CRRAWD-RPT' or
						//ns2:ID='DAM-PTPAWD-RPT' or
						//ns2:ID='DRUC-AWD-RPT'
					</xpath>
					<setHeader headerName="subject">
						<xpath resultType="java.lang.String">concat(concat(//ns2:ID,' for QSE: '), //ns2:qse)</xpath>
					</setHeader>
					<transform>
						<xpath resultType="java.lang.String">//ns2:summary</xpath>
					</transform>
					<transform>
						<simple>This is the summary from the ERCOT message: ${in.body}</simple>
					</transform>
					<to  uri="smtp://smtp.tps.local:25?to=mbohan@tnsk.com&amp;from=Activemq@tnsk.com"/>
				</when>
			</choice>
		</route>
		<!-- You can use Spring XML syntax to define the routes here using the <route> element -->
		<route id="generalNotificationMessageHandler" errorHandlerRef="ercotInboundErrorHandler">
			<from uri="activemq:topic:VirtualTopic.ISOProxy.ErcotToTenaska.Mote"/>
			<from uri="activemq:topic:VirtualTopic.ISOProxy.ErcotToDirect"/>

			<choice>
				<when>
					<xpath>//Response</xpath>

					<to  uri="activemq:topic:VirtualTopic.xpath.ercot.nodal.inbound.Response"/>
				</when>
				<when>
					<xpath>matches(//ns1:MessageID,'^TPS_.*')</xpath>
            <setHeader headerName="ExternalID" inheritErrorHandler="true" id="setHeader11">
                <xpath resultType="java.lang.String">//ns1:MessageID</xpath>
            </setHeader>
					<to  uri="activemq:topic:VirtualTopic.xpath.ercot.nodal.Mote.inbound.RepliesWithExternalIds"/>
				</when>
				<otherwise>
					<to uri="activemq:topic:VirtualTopic.xpath.ercot.nodal.inbound.Alert.All"/>
					<choice>
						<when>
							<xpath>//ns2:type='TELEMETRY'</xpath>
							<to uri="activemq:topic:VirtualTopic.xpath.ercot.nodal.inbound.Alert.TELEMETRY"/>
						</when>
						<when>
							<xpath>//*:Noun='StartupShutdownInstructions'</xpath>
							<to uri="activemq:topic:VirtualTopic.xpath.ercot.nodal.inbound.Alert.StartupShutdownInstructions"/>
						</when>
						<when>
							<xpath>//ns2:type='Reported Trade'</xpath>
							<choice>
								<when>
									<xpath>/ErcotToDirectISOProxy</xpath>
									<to uri="activemq:topic:VirtualTopic.xpath.ercot.nodal.inbound.Alert.ReportedTrade.Direct"/>
								</when>
								<otherwise>
									<to uri="activemq:topic:VirtualTopic.xpath.ercot.nodal.inbound.Alert.ReportedTrade"/>
								</otherwise>
							</choice>
						</when>
						<when>
							<xpath>//ns1:Noun='UnconfirmedTrades'</xpath>
							<choice>
								<when>
									<xpath>/ErcotToDirectISOProxy</xpath>
									<to uri="activemq:topic:VirtualTopic.xpath.ercot.nodal.inbound.Alert.UnconfirmedTrade.Direct"/>
								</when>
								<otherwise>
									<to uri="activemq:topic:VirtualTopic.xpath.ercot.nodal.inbound.Alert.UnconfirmedTrade"/>
								</otherwise>
							</choice>
						</when>
						<when>
							<xpath>//ns1:Noun='ConfirmedTrades'</xpath>
							<choice>
								<when>
									<xpath>/ErcotToDirectISOProxy</xpath>
									<to  uri="activemq:topic:VirtualTopic.xpath.ercot.nodal.inbound.Alert.ConfirmedTrade.Direct"/>
								</when>
								<otherwise>
									<to  uri="activemq:topic:VirtualTopic.xpath.ercot.nodal.inbound.Alert.ConfirmedTrade"/>
								</otherwise>
							</choice>
						</when>

						<otherwise>
							<to  uri="activemq:topic:VirtualTopic.xpath.ercot.nodal.inbound.Alert.Other"/>
						</otherwise>
					</choice>

					<filter>
						<xpath>//ns2:type='Emergency Notice'</xpath>
						<to  uri="activemq:topic:VirtualTopic.xpath.ercot.nodal.inbound.EmergencyNotice"/>
					</filter>
					<filter>
						<xpath>//ns2:qse='ALLMPs'</xpath>
						<to  uri="activemq:topic:VirtualTopic.xpath.ercot.nodal.inbound.ALLMPs"/>
					</filter>
					<filter>
						<xpath>//ns2:type='Market Message'</xpath>
						<to  uri="activemq:topic:VirtualTopic.xpath.ercot.nodal.inbound.MarketMessage"/>
					</filter>
					<filter>
						<xpath>//ns2:ID='CM-ASM-NOTF'</xpath>
						<to  uri="activemq:topic:VirtualTopic.xpath.CM-ASM-NOTF"/>
						<to  uri="activemq:queue:queue.xpath.CM-ASM-NOTF.EMS.PROD"/>
						<to  uri="activemq:queue:queue.xpath.CM-ASM-NOTF.EMS.DR"/>
						<to  uri="activemq:queue:queue.xpath.CM-ASM-NOTF.EMS.DEV"/>
					</filter>
				</otherwise>
			</choice>
		</route>

		<route>
			<from uri="activemq:topic:VirtualTopic.LogMillMessages.>"/>
			<to  uri="activemq:queue:queue.LogMillMessages"/>
		</route>
		
		<route>
			<from uri="activemqprod:topic:VirtualTopic.ISOProxy.TenaskaToErcot.Mote"/>
			<to  uri="activemq:topic:VirtualTopic.ISOProxy.TenaskaToErcot.Mote"/>
		</route>
		
		<route>
			<from uri="activemqprod:topic:VirtualTopic.ISOProxy.ErcotToTenaska.Mote"/>
			<to  uri="activemq:topic:VirtualTopic.ISOProxy.ErcotToTenaska.Mote"/>
		</route>

		<route id="errorHandlerRoute1" errorHandlerRef="ercotInboundErrorHandler">

			<from uri="activemq:topic:VirtualTopic.ISOProxy.ErcotToTenaska"/>
			<onException id="onException1">
				<exception>java.lang.Exception</exception>
				<redeliveryPolicy maximumRedeliveries="1"/>
				<handled>
					<constant>true</constant>
				</handled>
				<setHeader headerName="ErrorSource">
					<simple>MRID Route</simple>
				</setHeader>
				<to uri="activemq:queue:ercot.nodal.inbound.DLQ"/>
			</onException>
			<when>
				<xpath>//Response</xpath>
				<when>
					<xpath>//*:mRID</xpath>


					<setHeader headerName="mRID">

						<xpath resultType="java.lang.String">//*:mRID</xpath>
					</setHeader>

					<to uri="activemq:queue:queue.xpath.ercot.nodal.outbound"/>
				</when>

			</when>


		</route>
	</camelContext>

    <!--
       Lets configure some Camel endpoints
    
       http://camel.apache.org/components.html
    -->

<bean id="ercotInboundErrorHandler" class="org.apache.camel.builder.DeadLetterChannelBuilder">
		<!-- exchanges is routed to mock:dead in cased redelivery failed -->
		<property name="deadLetterUri" value="activemq:queue:queue.ercot.inbound.DLQ"/>
		<!-- reference the redelivery policy to use -->
		<property name="redeliveryPolicy" ref="myRedeliveryPolicyConfig"/>
	</bean>

		<bean id="myRedeliveryPolicyConfig" class="org.apache.camel.processor.RedeliveryPolicy">
		<!-- try redelivery at most 1 time -->
		<property name="maximumRedeliveries" value="1"/>
		<!-- delay 250ms before redelivery -->
		<property name="redeliveryDelay" value="250"/>
	</bean>

	<bean id="jmsConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="vm://localhost?create=false&amp;waitForStart=10000" />
		<!--<property name="brokerURL" value="tcp://localhost:61616" />-->
		<property name="userName" value="${activemq.username}"/>
		<property name="password" value="${activemq.password}"/>
	</bean>

	<bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">
		<property name="maxConnections" value="16" />
		<property name="maximumActive" value="500" />
		<property name="connectionFactory" ref="jmsConnectionFactory" />
	</bean>


	<bean id="jmsConfig" class="org.apache.camel.component.jms.JmsConfiguration">
		<property name="connectionFactory" ref="pooledConnectionFactory"/>
		<property name="transacted" value="false"/>
		<property name="concurrentConsumers" value="1"/>
	</bean>

	<bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
		<property name="configuration" ref="jmsConfig"/>
	</bean>

	<bean id="activemqprod" class="org.apache.activemq.camel.component.ActiveMQComponent" >
		<property name="connectionFactory">
			<bean class="org.apache.activemq.ActiveMQConnectionFactory">
				<property name="brokerURL" value="failover:(tcp://messagebroker01.tps.local:61616,tcp://messagebroker02.tps.local:61616)?randomize=false" />
				<property name="userName" value="${activemq.username}"/>
				<property name="password" value="${activemq.password}"/>
			</bean>
		</property>
	</bean>
	
	<!--<bean id="bodyInAggregationStrategyRef" class="org.apache.camel.processor.aggregate.BodyInAggregatingStrategy"/>-->
	<bean id="groupedExchangeAggregationStrategyRef" class="org.apache.camel.processor.aggregate.GroupedExchangeAggregationStrategy"/>
	<bean id="useLatestAggregationStrategyRef" class="org.apache.camel.processor.aggregate.UseLatestAggregationStrategy"/>

	<bean id="email" class="org.apache.activemq.camel.component.ActiveMQComponent" >
		<property name="connectionFactory">
			<bean class="org.apache.activemq.ActiveMQConnectionFactory">
				<property name="brokerURL" value="failover:(tcp://messagebroker01.tps.local:61616,tcp://messagebroker02.tps.local:61616)?randomize=false" />
				<property name="userName" value="${activemq.username}"/>
				<property name="password" value="${activemq.password}"/>
			</bean>
		</property>
	</bean>
</beans>

<%@ import val generator: org.fusesource.ide.generator.Generator %>
<%
  import org.fusesource.camel.tooling.util.Languages

  val langTool = new Languages()
%>
var _apacheCamelModel = {
  "nodes": {
     "from": {
        "title":    "From",
        "group":   "Endpoints",
        "description":  "Consumes from an endpoint",
        "tootip":  "Consumes from an endpoint",
        "icon":     "endpoint24.png"
      },
     "to": {
        "title":    "To",
        "group":   "Endpoints",
        "description":  "Sends messages to an endpoint",
        "tootip":  "Sends messages to an endpoint",
        "icon":     "endpoint24.png"
      },
     "route": {
        "title":    "Route",
        "group":   "",
        "description":  "A collection of EIP steps",
        "tootip":  "A collection of EIP steps",
        "icon":     "route24.png"
      },

#for( node <- nodeDefinitions)
<%
    println("Searching for " + node.id + "24" + " in " + sourceDir);
    val icon = findIconFileOrElse("", node.id + "24", node.defaultImageName + "24.png")
 %>
     "${node.id}": {
      "title":    "${node.title}",
      "group":   "${node.group}",
      "description":  "${node.description}",
      "tootip":  "${node.description}",
      "icon":     "${icon}",
      "properties": [
  #for (prop <- node.beanProperties)
        {
          "id":     "${prop.name.toLowerCase}",
				  <% val xmlElements = node.xmlElements(prop) %>
				    #if (xmlElements.isEmpty)
				  	#else
						"elements": {
						  #for (xe <- xmlElements)
				       "${xe.name()}": "${xe.`type`().getName}",
						  #end
							},
				  	#end
      #if (node.isBeanMethod(prop))
					"type":   "combo",
					"kind": "beanMethod",
          "title":'Select a method...',
      #elif (node.isBeanRef(prop))
        "type":   "combo",
				"kind":   "beanRef",
				"title": "Select a bean...",
	    #elif (isExpression(prop))
				"kind" : "expression",
      #else
      #end
	        "type":   "${javaScriptType(prop)}",
          <%--
					"type": "${propertyType(prop)}"
					--%>
          "description":"${prop.description}",
          "tooltip":"${prop.description}",
					#if (prop.readOnly)
          "readonly": true,
		      #end
					#if (prop.optional && !node.isRequired(prop))
          "optional": true,
		      #end
					#if (wrapLines(prop))
          "wrapLines": true,
		      #end
          "title":  "${prop.label}"
        },
  #end
      ]
    },
#end
	},
	"languages": {
#for( lang <- langTool.languages)
    "${lang.id}": {
      "name": "${lang.name}",
      "description": "${lang.description}"
    },
#end
	}
};
/*******************************************************************************
 * Copyright (c) 2014 Red Hat, Inc.
 * Distributed under license by Red Hat, Inc. All rights reserved.
 * This program is made available under the terms of the
 * Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Red Hat, Inc. - initial API and implementation
 ******************************************************************************/
package org.fusesource.ide.camel.model.generated;

import java.util.Map;

#foreach($pt in $importedTypes)
import $pt;
#end
import org.apache.camel.model.ProcessorDefinition;
import org.eclipse.ui.views.properties.PropertyDescriptor;
import org.eclipse.ui.views.properties.TextPropertyDescriptor;
import org.fusesource.ide.camel.model.${baseClass};
import org.fusesource.ide.camel.model.ExpressionPropertyDescriptor;
import org.fusesource.ide.camel.model.RouteContainer;
import org.fusesource.ide.camel.model.util.Objects;
import org.fusesource.ide.commons.properties.BooleanPropertyDescriptor;
import org.fusesource.ide.commons.properties.ComplexPropertyDescriptor;
import org.fusesource.ide.commons.properties.ComplexUnionPropertyDescriptor;
import org.fusesource.ide.commons.properties.EnumPropertyDescriptor;
import org.fusesource.ide.commons.properties.ListPropertyDescriptor;
import org.fusesource.ide.commons.properties.UnionTypeValue;

/**
 * The Node class from Camel's ${node.getName()}
 *
 * NOTE - this file is auto-generated using Velocity.
 *
 * DO NOT EDIT!
 */
public class ${node.getDefinitionName()} extends ${baseClass} {

#foreach($p in $node.beanProperties())
    public static final String PROPERTY_${p.name().toUpperCase()} = "${node.getDefinitionName()}.${node.capitalize($p.name())}";
#end

#foreach($p in $node.beanProperties())
    private ${node.propertyType($p)} ${p.name()};
#end

    public ${node.getDefinitionName()}() {
    }

    public ${node.getDefinitionName()}(${node.getName()} definition, RouteContainer parent) {
#if(${isRoute})
        super(definition, parent);
#else
        super(parent);
        loadPropertiesFromCamelDefinition(definition);
        loadChildrenFromCamelDefinition(definition);
#end
    }

#if(!${isRoute})
    @Override
    public String getIconName() {
        return "${generator.findIconFileOrElse($generator.getEclipseIconDir(), $node.getId(), "${node.defaultImageName()}.png")}";
    }

    @Override
    public String getDocumentationFileName() {
        return "${node.documentationFile()}";
    }

    @Override
    public String getCategoryName() {
        return "${node.group()}";
    }
#end

#foreach($p in $node.beanProperties())
    /**
     * @return the ${p.name()}
     */
    public ${node.propertyType($p)} ${node.getOrIsMethodPrefix($p)}${node.capitalize($p.name())}() {
        return this.${p.name()};
    }

    /**
     * @param ${p.name()} the ${p.name()} to set
     */
    public void set${node.capitalize(${p.name()})}(${node.propertyType($p)} ${p.name()}) {
        ${node.propertyType($p)} oldValue = this.${p.name()};
        this.${p.name()} = ${p.name()};
        if (!isSame(oldValue, ${p.name()})) {
            firePropertyChange(PROPERTY_${p.name().toUpperCase()}, oldValue, ${p.name()});
        }
    }

#end
    @Override
    protected void addCustomProperties(Map<String, PropertyDescriptor> descriptors) {
        super.addCustomProperties(descriptors);

#foreach($p in $node.beanProperties())
#if($node.isExpression($p))
        PropertyDescriptor desc${node.capitalize(${p.name()})} = new ExpressionPropertyDescriptor(PROPERTY_${p.name().toUpperCase()}, Messages.propertyLabel${node.getDefinitionName()}${node.capitalize(${p.name()})});
#elseif($node.isBooleanPropertyType($p))
        PropertyDescriptor desc${node.capitalize(${p.name()})} = new BooleanPropertyDescriptor(PROPERTY_${p.name().toUpperCase()}, Messages.propertyLabel${node.getDefinitionName()}${node.capitalize(${p.name()})});
#elseif($node.isEnumPropertyType($p))
        PropertyDescriptor desc${node.capitalize(${p.name()})} = new EnumPropertyDescriptor(PROPERTY_${p.name().toUpperCase()}, Messages.propertyLabel${node.getDefinitionName()}${node.capitalize(${p.name()})}, ${p.propertyType().getSimpleName()}.class);
#elseif($node.isListPropertyType($p))
        PropertyDescriptor desc${node.capitalize(${p.name()})} = new ListPropertyDescriptor(PROPERTY_${p.name().toUpperCase()}, Messages.propertyLabel${node.getDefinitionName()}${node.capitalize(${p.name()})});
#elseif($node.isSimplePropertyType($p))
        PropertyDescriptor desc${node.capitalize(${p.name()})} = new TextPropertyDescriptor(PROPERTY_${p.name().toUpperCase()}, Messages.propertyLabel${node.getDefinitionName()}${node.capitalize(${p.name()})});
#else
#if($node.xmlElements($p).empty)
        PropertyDescriptor desc${node.capitalize(${p.name()})} = new ComplexPropertyDescriptor(PROPERTY_${p.name().toUpperCase()}, Messages.propertyLabel${node.getDefinitionName()}${node.capitalize(${p.name()})}, ${p.propertyType().getSimpleName()}.class);
#else
        PropertyDescriptor desc${node.capitalize(${p.name()})} = new ComplexUnionPropertyDescriptor(PROPERTY_${p.name().toUpperCase()}, Messages.propertyLabel${node.getDefinitionName()}${node.capitalize(${p.name()})}, ${p.propertyType().getSimpleName()}.class, new UnionTypeValue[] {
#foreach($xe in $node.xmlElements($p))
                new UnionTypeValue("${xe.name()}", ${xe.type().getName()}.class),
#end
        });
#end
#end
#end

#foreach($p in $node.beanProperties())
        descriptors.put(PROPERTY_${p.name().toUpperCase()}, desc${node.capitalize($p.name())});
#end
    }

    /* (non-Javadoc)
     * @see org.eclipse.ui.views.properties.IPropertySource\#setPropertyValue(java.lang.Object, java.lang.Object)
     */
    @Override
    public void setPropertyValue(Object id, Object value) {
#foreach($p in $node.beanProperties())
        if (PROPERTY_${p.name().toUpperCase()}.equals(id)) {
            set${node.capitalize($p.name())}(Objects.convertTo(value, ${node.propertyType($p)}.class));
            return;
        }
#end
        super.setPropertyValue(id, value);
    }

    /* (non-Javadoc)
     * @see org.fusesource.ide.camel.model.AbstractNode\#getPropertyValue(java.lang.Object)
     */
    @Override
    public Object getPropertyValue(Object id) {
#foreach($p in $node.beanProperties())
        if (PROPERTY_${p.name().toUpperCase()}.equals(id)) {
            return ${node.getterExpression("this", $p)};
        }
#end
        return super.getPropertyValue(id);
    }

    @SuppressWarnings("rawtypes")
    @Override
    public ProcessorDefinition createCamelDefinition() {
        ${node.getName()} answer = new ${node.getName()}();

#foreach($p in $node.beanProperties())
#set($getter = ${node.getterExpression("this", $p)})
        ${node.setterExpression("answer", $p, "toXmlPropertyValue(PROPERTY_${p.name().toUpperCase()}, ${getter})")};
#end

        super.savePropertiesToCamelDefinition(answer);
        return answer;
    }

    @SuppressWarnings("rawtypes")
    @Override
    public Class<?> getCamelDefinitionClass() {
        return ${node.getName()}.class;
    }

    @SuppressWarnings("rawtypes")
    @Override
    protected void loadPropertiesFromCamelDefinition(ProcessorDefinition processor) {
        super.loadPropertiesFromCamelDefinition(processor);

        if (processor instanceof ${node.getName()}) {
            ${node.getName()} node = (${node.getName()}) processor;

#foreach($p in $node.beanProperties())
#set($getter = ${node.getterExpression("node", $p)})
            ${node.setterExpression("this", $p, $getter)};
#end
        } else {
            throw new IllegalArgumentException("ProcessorDefinition not an instanceof ${node.getName()}. Was " + processor.getClass().getName());
        }
    }

}

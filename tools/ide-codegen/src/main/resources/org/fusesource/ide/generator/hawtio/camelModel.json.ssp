<%@ import val generator: org.fusesource.ide.generator.Generator %>
<%
  import io.fabric8.camel.tooling.util.Languages
  import io.fabric8.camel.tooling.util.Strings._

  val langTool = new Languages()
%>
{
  "definitions": {
     "endpoint": {
        "title":   "Endpoint",
        "type": "object",
        "extends": {
            "type": "org.apache.camel.model.OptionalIdentifiedDefinition"
        },
        "group":   "Endpoints",
        "description":  "Represents a camel endpoint which is used to consume messages or send messages to some kind of middleware or technology",
        "icon":     "endpoint24.png",
        "properties": {
            "uri": {
                "type": "string"
            },
            "ref": {
                "type": "string"
            }
        }
      },
     "from": {
        "title":    "From",
        "type": "object",
        "extends": {
            "type": "endpoint"
        },
        "description":  "Consumes from an endpoint",
        "tooltip":  "Consumes from an endpoint",
        "icon":     "endpoint24.png"
      },
     "to": {
        "title":    "To",
        "type": "object",
        "extends": {
            "type": "endpoint"
        },
        "description":  "Sends messages to an endpoint",
        "tooltip":  "Sends messages to an endpoint",
        "icon":     "endpoint24.png"
      },
     "route": {
        "title":    "Route",
        "group":   "",
        "description":  "A collection of EIP steps",
        "tooltip":  "A collection of EIP steps",
        "icon":     "route24.png"
      },
			"org.apache.camel.model.OptionalIdentifiedDefinition": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"description": {
						// "type": "org.apache.camel.model.DescriptionDefinition"
						"type": "string",
						"formTemplate": "<textarea class='input-xxlarge' rows='8'></textarea>"
					},
					"inheritErrorHandler": {
						"type": "java.lang.Boolean"
					}
				}
			},
			"org.apache.camel.model.language.ExpressionDefinition": {
	      "description": "A Camel expression",
	      "tooltip": "Pick an expression language and enter an expression",
				"type": "object",
	      "properties": {
	        "expression": {
	          "type": "string",
	          "description": "The expression",
	          "tooltip": "Enter the expression in your chosen language syntax",
	          "title": "Expression"
	        },
	        "language": {
	          "type": "string",
						"enum": [
						<%
						comma(langTool.languages){ lang =>
						%>		
						    "${lang.id}"
						<%
						}
						%>				
						],
	          "description": "The camel expression language ot use",
	          "tooltip": "Pick the expression language you want to use",
	          "title": "Language"
	        }
	      }
			},

#for( node <- nodeDefinitions)
<%
    println("Searching for " + node.id + "24" + " in " + sourceDir);
    val icon = findIconFileOrElse("", node.id + "24", node.defaultImageName + "24.png")
 %>
     "${node.id}": {
			"type": "object",
			"extends": {
				"type": "org.apache.camel.model.OptionalIdentifiedDefinition"
			},
      "title":    "${node.title}",
      "group":   "${node.group}",
      "description":  "${node.description}",
      "tooltip":  "${node.description}",
      "icon":     "${icon}",
			#if (node.canAcceptInput())
      "acceptInput": true,
      #end
			#if (node.canAcceptOutput())
      "acceptOutput": true,
      #end
			#if (node.isNextSiblingStepAddedAsNodeChild())
			"nextSiblingAddedAsChild": true,
      #end
      "properties": {
	<%
	comma(node.beanProperties){ prop =>
		val xmlElements = node.xmlElements(prop) 
    val optElementType = elementTypeId(prop)
	%>		
        "${prop.name}": {
    #if (!xmlElements.isEmpty)
						"type": [
							<%
							comma(xmlElements){ xe =>
							%>		
				       "${xe.`type`().getName}"
 						 	<%
 						 	}
 						 	%>				
							],
		#else
      #if (node.isBeanMethod(prop))
					"control":   "combo",
					"kind": "beanMethod",
          "title":"Select a method...",
      #elif (node.isBeanRef(prop))
        "control":   "combo",
				"kind":   "beanRef",
				"title": "Select a bean...",
	    #elif (isExpression(prop))
				"kind" : "expression",
      #else
      #end
	        "type":   "${javaScriptType(prop)}",
					#end
					#if (optElementType.isDefined)
          "items": { "type": "${optElementType.get}" },
 		      #end
          "description":"${capitalize(splitCamelCase(prop.description))}",
          "tooltip":"${capitalize(splitCamelCase(prop.description))}",
					#if (prop.readOnly)
          "readonly": true,
		      #end
					#if (prop.optional && !node.isRequired(prop))
          "optional": true,
		      #end
					#if (wrapLines(prop))
          "wrapLines": true,
		      #end
          "title":  "${capitalize(splitCamelCase(prop.label))}"
        }
	<%
	}
	%>				
			}
    },
#end
<%
comma(baseClassAndNestedClasses){ node =>
%>		
     "${node.id}": {
 			"type": "object",
      "description":  "${node.description}",
      "tooltip":  "${node.description}",
      "properties": {
	<%
	comma(node.beanProperties){ prop =>
	%>		
        "${prop.name}": {
				  <% 
					val xmlElements = node.xmlElements(prop) 
					%>
				    #if (xmlElements.isEmpty)
				  	#else
						"elements": {
							<%
							comma(xmlElements){ xe =>
							%>		
				       "${xe.name()}": "${xe.`type`().getName}"
						 	<%
						 	}
						 	%>				
							},
				  	#end
      #if (node.isBeanMethod(prop))
					"control":   "combo",
					"kind": "beanMethod",
          "title":'Select a method...',
      #elif (node.isBeanRef(prop))
        "control":   "combo",
				"kind":   "beanRef",
				"title": "Select a bean...",
	    #elif (isExpression(prop))
				"kind" : "expression",
      #else
      #end
	        "type":   "${javaScriptType(prop)}",
          <%--
					"type": "${propertyType(prop)}"
					--%>
          "description":"${capitalize(splitCamelCase(prop.description))}",
          "tooltip":"${capitalize(splitCamelCase(prop.description))}",
					#if (prop.readOnly)
          "readonly": true,
		      #end
					#if (prop.optional && !node.isRequired(prop))
          "optional": true,
		      #end
					#if (wrapLines(prop))
          "wrapLines": true,
		      #end
          "title":  "${capitalize(splitCamelCase(prop.label))}"
        }
	<%
	}
	%>				
			}
    }
<%
}
%>				
	},
	"languages": {
<%
comma(langTool.languages){ lang =>
%>		
    "${lang.id}": {
      "name": "${lang.name}",
      "description": "${lang.description}"
    }
<%
}
%>				
	}
}